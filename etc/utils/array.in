#!/bin/bash

if [[ -z "${__UTILS_ARRAY_IN__}" ]]; then __UTILS_ARRAY_IN__=_; else return; fi

#
#$1:array name
#$2:args...
#	args is "[name1]=value1 [name2]=value2 ... [nameX]=valueX"
#
__aa_init() {
	local array="$1"; shift
	local action="${array}=($@)"

	eval "${action}"
}

#
#$1:array name
#$2:args...
#	args is name1=value1 name2=value2 ... nameX=valueX
#
aa_init() {
	local array="$1"; shift
	local args="$*"

	if [[ -z "${args}" ]]; then
		return ${e_inval}
	fi

	#
	# "name1=value1 name2=value2 ... nameX=valueX"
	#	==>
	# "name1=value1 name2=value2 ... nameX=valueX"
	#
	args=" ${args}"
	#
	# " name1=value1 name2=value2 ... nameX=valueX"
	#	==>
	# " [name1=value1 [name2=value2 ... [nameX=valueX"
	#
	args=${args// / [}
	#
	# " [name1=value1 [name2=value2 ... [nameX=valueX"
	#	==>
	# " [name1]=value1 [name2]=value2 ... [nameX]=valueX"
	#
	args=${args//=/]=}

	__aa_init ${array} ${args}
}

#
#$1:array name
#$2:array key
#
aa_get() {
	local name="$1"
	local key="$2"

	eval "echo \${${name}[${key}]}"
}

#
#$1:array name
#$2:array key
#$3:array value...
#
aa_set() {
	local name="$1"
	local key="$2"; shift 2
	local value="$*"

	eval "${name}[${key}]=\"${value}\""
}

#
#$1:array name
#
aa_keys() {
	local name="$1"

	eval "echo \${!${name}[@]}"
}

#
#$1:array name
#
aa_values() {
	local name="$1"

	eval "echo \${${name}[@]}"
}

#
#$1:array name
#
aa_count() {
	local name="$1"

	eval "echo \${#${name}[@]}"
}

#
# merge src to dst
#
#$1:src
#$2:dst
#
aa_merge() {
	local src="$1"
	local dst="$2"

	local key
	for key in $(aa_keys ${src}); do
		aa_set ${dst} ${key} "$(aa_get ${src} ${key})"
	done
}

#
# complete dst from src
#
#$1:src
#$2:dst
#
aa_complete() {
	local src="$1"
	local dst="$2"

	local key
	for key in $(aa_keys ${src}); do
		if [[ -z "$(aa_get ${dst} ${key})" ]]; then
			aa_set ${dst} ${key} "$(aa_get ${src} ${key})"
		fi
	done
}

#
#$1:aa
#[$2:show]
#
aa_show() {
	local aa="$1"
	local show="$2"; show=${show:-echo}

	local key
	for key in ${!plt[@]}; do
		eval "${show} ${aa}[${key}]=${plt[${key}]}"
	done
}

#
#$1:aa
#$2:file
#
aa_serialize() {
	local aa="$1"
	local file=$(mkfile "$2") || return $?

	>${file}

	local key
	for key in $(aa_keys ${aa}); do
		echo "${key} $(aa_get ${aa} ${key})" >> ${file}
	done

	fsync ${file}
}

#
#$1:aa
#$2:file
#
aa_deserialize() {
	local aa="$1"
	local file="$2"

	if [[ ! -f "${file}" ]]; then
		return ${e_noexist}
	fi

	local key value
	while read key value; do
		aa_set ${aa} ${key} "${value}"
	done < ${file}
}
