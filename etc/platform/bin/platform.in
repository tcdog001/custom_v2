#!/bin/bash

. /etc/utils/utils.in

if [[ -n "${__PLATFORM_BIN_PLATFORM_IN__}" ]]; then
	return
else
	__PLATFORM_BIN_PLATFORM_IN__="$0"
fi

readonly FILE_REGISTER=/data/.register.json
readonly FILE_CANCELLATION=/data/.cancellation.json
readonly BACKUP_LOG=/mnt/flash/rootfs_data/backup/log/
readonly CERTIFICATE=/etc/platform/conf/server.cer
readonly USER_PASSWD=autelanauteviewlms:autelanauteviewlms20140925
readonly CURL_VERSION_V1=1
readonly CURL_VERSION_V2=2
readonly OPERATE_OK=0
readonly OPERATE_NOK=-9
readonly REG_TIMES=3

#
# $1: url
# $2: response
# $3: result
# $4: cookie
# $5: cert 
# $6: userpasswd
# $7: post_data
# $8: curl version
# $9: key
#
pf_curl_post() {
	local url="$1"
	local response_file="$2"
	local result_file="$3"
	local cookie_file="$4"
	local cert="$5"
	local userpasswd="$6"
	local data="$7"
	local version="$8"
	local key="$9"
	
	local curl_cmd=""
	local response=""
	local result=""
	
	if [[ ${version} -eq ${CURL_VERSION_V2} ]]; then
		curl_cmd="curl -H \"Content-type: application/json\" -X POST -s"
		result=$(${curl_cmd} -cert ${cert} -key ${key} -u ${userpasswd} -d "${data}" -c ${cookie_file} ${url} --location-trust -L); response=$?		
	else
		curl_cmd="curl -k -H \"Content-type: application/json\" -X POST -s"
		result=$(${curl_cmd} -cert ${cert} -u ${userpasswd} -d "${data}" -c ${cookie_file} ${url}); response=$?
	fi
	
	[[ ${response} && ${response_file} ]] && echo ${response} > ${response_file}
	[[ ${result} && ${result_file} ]] && echo ${result} > ${result_file}
}

#
# $1: file_register
#
get_mac_json() {
	local file_register="$1"
	
	local mac_string=$(cat ${file_register} | jq -c '.mac|strings')
	local mac_json={\"mac\":${mac_string}}

	echo "${mac_json}"
}

#
# $1: url_path
# $2: url_default
# $3: page
#
get_url() {
	local url_path="$1"
	local url_default="$2"
	local page="$3"
	
	local url=""
	local url_tmp=""
	
	[[ -s "${url_path}" ]] && url_tmp=$(cat ${url_path} |jq -j '.url|strings' 2> /dev/null)
	if [[ "${url_tmp}" ]]; then
		url="${url_tmp}${page}"
	else
		url="${url_default}${page}"
	fi
	echo ${url}
}

get_url_string() {
	local url_tmp="$1"
	local url_default="$2"
	local page="$3"
	
	local url=""
	
	if [[ "${url_tmp}" && "${url_tmp}" != "none" && "${url_tmp}" != "null" ]]; then
		url="${url_tmp}${page}"
	elif [[ "${url_default}" ]]; then
		url="${url_default}${page}"
	fi
	echo ${url}
}

# $1: file_name
delete_file() {
	local file="$1"
	
	[[ -f ${file} ]] && rm ${file}
}

reg_check(){
	local cookie_file="$1"
	local url="$2"
	local result_file="$3"
	local response_file="$4"
	local version="$5";shift 5
	local curl_data="$*"

	local curl_ok=0
	local curl_couldnt_connect=7 
	local curl_couldnt_resolve_host=6  
	local reconnection_interval=5
	local times="${REG_TIMES}"

	while true
	do
		if [[ ${version} -eq ${CURL_VERSION_V2} ]]; then
			pf_curl_post "${url}" "${response_file}" "${result_file}" "${cookie_file}" \
				"$(get_sysinfo_path file.ssl.cert.v2)" "${USER_PASSWD}" "@${curl_data}" "${version}" "$(get_sysinfo_path file.ssl.key.v2)"
		else
			pf_curl_post "${url}" "${response_file}" "${result_file}" "${cookie_file}" \
				"${CERTIFICATE}" "${USER_PASSWD}" "@${curl_data}"
		fi
		response=$(cat ${response_file})

		if [[ "${response}" != "${curl_ok}" ]]; then
			if [[ ${version} -eq ${CURL_VERSION_V2} ]]; then
				(( times -- ))
				[[ ${times} -le 0 ]] && break
			fi
			sleep "${reconnection_interval}"
		else
			break
		fi
	done
}

get_code_from_result(){
	local keyword="$1"
	local result_file="$2"

	if [[ "${keyword}" = "command" ]]; then
		out=$(cat ${result_file} 2> /dev/null |jq -j '.StatusCode' 2> /dev/null)
	else
		out=$(cat ${result_file} 2> /dev/null |jq -j '.code' 2> /dev/null)
	fi
	
	case ${out} in
		${OPERATE_OK})
			jdebug_event "${keyword}" "success!"
			;;
		-1)	
			jdebug_event "${keyword}" "user/password error!"
			;;
		-2)
			jdebug_event "${keyword}" "json error!"
			;;
		-3)
			jdebug_event "${keyword}" "db error!"
			;;
		*) 
			jdebug_event "${keyword}" "fail!"
			;;
	esac
	echo ${out}
}

lms_operation() {
	local url="$1"
	local type="$2"
	local operation="$3"
	local result_file="$4";shift 4
	local json="$*"
	
	local cookie_file=/tmp/registerCookie.${type}.txt
	local response_file=/tmp/registerResponse.${type}.txt
	local version=$(get_curl_version "${type}")

	delete_file "${result_file}"

	if [[ "${version}" -eq ${CURL_VERSION_V2} ]]; then
		while [[ ! -f "${json}" ]]; do
			if [[ "${operation}" = "status" ]]; then
				get_sysinfo_json.sh "${operation}" online
			else
				get_sysinfo_json.sh "${operation}"
			fi
		done
	else

		while [[ ! -f "${json}" ]]; do
			sleep 5
		done
	fi

	if [[ -f "${json}" ]]; then
		reg_check  "${cookie_file}" "${url}" "${result_file}" "${response_file}" "${version}" "${json}"
		delete_file "${response_file}"
		delete_file "${cookie_file}"
	else
		echo "${json} is not exist!"
	fi
}

register_operation() {
	local url_path="$1"
	local url_default="$2"
	
	local page=lteRegister.do
	local type=v1
	local operation=register
	local jsonfile=$(get_sysinfo_path file.register)
	local result=/tmp/registerResult.txt
	local url=$(get_url ${url_path} ${url_default} ${page})
	
	lms_operation "${url}" "${type}" "${operation}" "${result}" "${jsonfile}"
	local Code=$(get_code_from_result "${operation}" "${result}")
}

#
# $1: json, $2: key
#
get_value_from_json() {
	local json="$1"
	local key="$2"
	
	local value=$(echo ${json} | eval jq -j '.${key}' 2> /dev/null)
	
	[[ ${value} ]] && echo ${value}
}

#
# $1: key, $2: value
#
set_value_to_sysinfo() {
	local key="$1"; shift 1
	local value="$*"
	
	[[ "${value}" = "null" ]] && return
	set_sysinfo "${key}" "${value}"
}

#
# $1: result file
#
get_profile_from_result_then_set_to_sysinfo() {
	local operation="$1"
	local result_file="$2"

	[[ ! -s ${result_file} ]] && return
	
	local Code=$(get_code_from_result "${operation}" "${result_file}")
	if [[ "${Code}" = "${OPERATE_OK}" ]]; then
		local result=$(cat ${result_file})
		local APGroup=$(get_value_from_json ${result} "ApGroup")
		local MngServer=$(get_value_from_json ${result} "MngServer")
		local CfgServer=$(get_value_from_json ${result} "CfgServer")
		local WebUpdateServer=$(get_value_from_json ${result} "WebUpdateServer")
		local UmsAuthServer=$(get_value_from_json ${result} "UmsAuthServer")
		local UmsBillServer=$(get_value_from_json ${result} "UmsBillServer")
		local LogServer=$(get_value_from_json ${result} "LogServer")
		local AlmServer=$(get_value_from_json ${result} "AlmServer")
		local GpsLogServer=$(get_value_from_json ${result} "GpsLogServer")
		local NatLogServer=$(get_value_from_json ${result} "NatLogServer")
		local SniffLogServer=$(get_value_from_json ${result} "SniffLogServer")
		local PvLogServer=$(get_value_from_json ${result} "PvLogServer")
		local TargetSwVer=$(get_value_from_json ${result} "TargetSwVer")
		local MngServerToken=$(get_value_from_json ${result} "MngServerToken")
		local CfgServerToken=$(get_value_from_json ${result} "CfgServerToken")
		local WebUpdateServerToken=$(get_value_from_json ${result} "WebUpdateServerToken")
		local UmsAuthServerToken=$(get_value_from_json ${result} "UmsAuthServerToken")
		local UmsBillServerToken=$(get_value_from_json ${result} "UmsBillServerToken")
		local LogServerToken=$(get_value_from_json ${result} "LogServerToken")
		local AlmServerToken=$(get_value_from_json ${result} "AlmServerToken")
		local GpsLogServerToken=$(get_value_from_json ${result} "GpsLogServerToken")
		local NatLogServerToken=$(get_value_from_json ${result} "NatLogServerToken")
		local SniffLogServerToken=$(get_value_from_json ${result} "SniffLogServerToken")
		local PvLogServerToken=$(get_value_from_json ${result} "PvLogServerToken")
		
		set_value_to_sysinfo login.status ${Code}
		set_value_to_sysinfo login.time $(date '+%FT%T')
		set_value_to_sysinfo profile.ApGroup ${APGroup}
		set_value_to_sysinfo profile.MngServer ${MngServer}
		set_value_to_sysinfo profile.CfgServer ${CfgServer}
		set_value_to_sysinfo profile.WebUpdateServer ${WebUpdateServer}
		set_value_to_sysinfo profile.UmsAuthServer ${UmsAuthServer}
		set_value_to_sysinfo profile.UmsBillServer ${UmsBillServer}
		set_value_to_sysinfo profile.LogServer ${LogServer}
		set_value_to_sysinfo profile.AlmServer ${AlmServer}
		set_value_to_sysinfo profile.GpsLogServer ${GpsLogServer}
		set_value_to_sysinfo profile.NatLogServer ${NatLogServer}
		set_value_to_sysinfo profile.SniffLogServer ${SniffLogServer}
		set_value_to_sysinfo profile.PvLogServer ${PvLogServer}
		set_value_to_sysinfo profile.TargetSwVer ${TargetSwVer}
		set_value_to_sysinfo token.MngServer ${MngServerToken}
		set_value_to_sysinfo token.CfgServer ${CfgServerToken}
		set_value_to_sysinfo token.WebUpdateServer ${WebUpdateServerToken}
		set_value_to_sysinfo token.UmsAuthServer ${UmsAuthServerToken}
		set_value_to_sysinfo token.UmsBillServer ${UmsBillServerToken}
		set_value_to_sysinfo token.LogServer ${LogServerToken}
		set_value_to_sysinfo token.AlmServer ${AlmServerToken}
		set_value_to_sysinfo token.GpsLogServer ${GpsLogServerToken}
		set_value_to_sysinfo token.NatLogServer ${NatLogServerToken}
		set_value_to_sysinfo token.SniffLogServer ${SniffLogServerToken}
		set_value_to_sysinfo token.PvLogServer ${PvLogServerToken}
	fi
}

#
# $1: curl type. e.g. v1,v2
#
get_curl_version() {
	local type="$1"
	
	local version=0
	
	case ${type} in
	v1)
		version=${CURL_VERSION_V1}
		;;
	v2)
		version=${CURL_VERSION_V2}
		;;
	*)
		version=0
		;;
	esac
	echo ${version}
}

register_operation_v2() {
	local url_tmp="$1"
	local url_default="$2"
	
	local page=lteRegister.do
	local type=v2
	local operation=register
	local jsonfile=$(get_sysinfo_path file.register.v2)
	local result=/tmp/${operation}Result.${type}.txt
	local url=$(get_url_string "${url_tmp}" "${url_default}" "${page}")
	
	set_value_to_sysinfo login.status "${OPERATE_NOK}"
	lms_operation "${url}" "${type}" "${operation}" "${result}" "${jsonfile}"
	get_profile_from_result_then_set_to_sysinfo "${operation}" "${result}"
}

status_operation_v2() {
	local url_tmp="$1"
	local url_default="$2"
	
	local page=lteStatus.do
	local type=v2
	local operation=status
	local jsonfile=$(get_sysinfo_path file.status.v2)
	local result=/tmp/${operation}Result.${type}.txt
	local url=$(get_url_string "${url_tmp}" "${url_default}" "${page}")
	
	lms_operation "${url}" "${type}" "${operation}" "${result}" "${jsonfile}"
	local Code=$(get_code_from_result "${operation}" "${result}")
}

exec_cmd() {
	local result="$1"
	local command_file="$2"
	local command_log="$3"

	[[ -z ${result} ]] && return

	echo "${result}" |tr ";" "\n" > "${command_file}" 
	cat "${command_file}" | while read myCommand
	do
	 	echo "Command:""${myCommand}"
	 	echo "Get the Command :""${myCommand}"";time is :"`date`>> "${command_log}"
		logger "platform" "command:$myCommand"
		eval "${myCommand}"
	done

}

get_cmd_from_result() {
	local operation="$1"
	local result="$2"

	[[ ! -s ${result} ]] && return
	
	local Code=$(get_code_from_result "${operation}" "${result}")
	if [[ "${Code}" = "${OPERATE_OK}" ]]; then
		local out=$(cat "${result}" |jq -j '.SlowCmd' 2> /dev/null)
		local command=""
		
		if [[ "${out}" != "null" ]]; then
			command=$(echo "${out}" |base64 -d)
		fi
		echo ${command}
	fi
}

command_operation_v2(){
	local url_tmp="$1"
	local url_default="$2"
	
	local page=lteCommand.do
	local type=v2
	local operation=command
	local jsonfile=$(get_sysinfo_path file.command.v2)
	local result=/tmp/${operation}Result.${type}.txt
	local command_file=/tmp/${operation}.${type}.txt
	local command_file_record=/tmp/${operation}_record.${type}.log
	local url=$(get_url_string "${url_tmp}" "${url_default}" "${page}")
	
	lms_operation "${url}" "${type}" "${operation}" "${result}" "${jsonfile}"
	local command=$(get_cmd_from_result "${operation}" "${result}")
	[[ "${command}" ]] && exec_cmd "${command}" "${command_file}" "${command_file_record}"
}

command_operation(){

	local page=lteCommand.do
	local cookie_file=/tmp/commandCookie.txt
	local result_file=/tmp/commandResult.txt
	local command_file=/tmp/command.txt
	local command_file_re=/tmp/command_record.log
	local url_path="$1"
	local url_default="$2"
	local file_register=$(get_sysinfo_path file.register)
	
	if [[ -f "${file_register}" ]]; then
		url=$(get_url ${url_path} ${url_default} ${page})
		mac=$(get_mac_json "${file_register}")
		#curl  -k  -cert "${CERTIFICATE}"  -u "${USER_PASSWD}"  -H "Content-type: application/json"  -X POST  -d "${mac}"  -s  -c "${cookie_file}"  "${url}" > "${result_file}"
		pf_curl_post "${url}" "${response_file}" "${result_file}" "${cookie_file}" "${CERTIFICATE}" "${USER_PASSWD}" "${mac}"		
		
		out=$(cat ${result_file} |jq -j '.cmd')
		result=$(echo "${out}" |base64 -d)
		echo "${result}" |tr ";" "\n" > "${command_file}" 
		cat "${command_file}" | while read myCommand
		do
	 		echo "Command:""${myCommand}"
	 		echo "Get the Command :""${myCommand}"";time is :"`date`>> "${command_file_re}"
			logger "platform" "command:$myCommand"

			eval "${myCommand}"
		done
		delete_file "${result_file}"
		delete_file "${response_file}"
		delete_file "${cookie_file}"
		delete_file "${command_file}"		
	else
		logger "platform" "${file_register} is not exist!"
	fi

}
