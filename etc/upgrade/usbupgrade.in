#!/bin/bash

if [[ -n "${__UPGRADE_USBUPGRADE_IN__}" ]]; then
	return
else
	__UPGRADE_USBUPGRADE_IN__="$0"
fi

. ${__ROOTFS__}/etc/upgrade/upgrade.in


readonly file_usbupgrade_auto=${dir_usb_upgrade}/.usbupgrade_auto
readonly file_usbupgrade_force=${dir_usb_upgrade}/.usbupgrade_force

readonly file_usbupgrade_state=${dir_rootfs_data}/.usbupgrade_state

usbupgrade_logger() {
	do_logger usbupgrade "$@"
}

usbupgrade_echo_logger() {
	echo_logger usbupgrade "$@"
}

do_with_usbupgrade_echo_logger() {
	do_with_cb echo_logger usbupgrade "$@"
}

#
#[$1:state]
#
usbupgrade_state() {
	local state=$1

	if [ -z "${state}" ]; then
		#
		# get state
		#
		if [ -f "${file_usbupgrade_state}" ]; then
			cat ${file_usbupgrade_state}
		else
			echo "none"
		fi
	else
		#
		# set state
		#
		if [ "none" == "${state}" ]; then
			rm -f ${file_usbupgrade_state} \
				${file_usbupgrade_auto} 2>/dev/null
		else
			echo ${state} > ${file_usbupgrade_state}
			fsync ${file_usbupgrade_state}
		fi
	fi
}

#
#$1:sys or sata is blink
#$2:other init state
#
usbupgrade_blink_one() {
	local blink=$1
	local state=$2
	local sysled=${__ROOTFS__}/usr/sbin/sysled
	local fixed

	if [[ "sys" == "${blink}" ]]; then
		fixed="sata"
	else
		fixed="sys"
	fi

	${sysled} ${fixed} ${state}

	for ((;;)); do
		sleep 1

		if [[ "on" == "${state}" ]]; then
			state="off"
		else
			state="on"
		fi

		${sysled} ${blink} ${state}
	done
}

usbupgrade_ok() {
	local state="on"

	usbupgrade_state none

	for ((;;)); do
		sleep 1

		sysled sys ${state}
		if [[ "on" == "${state}" ]]; then
			state="off"
		else
			state="on"
		fi
		sysled sata ${state}
	done
}

usbupgrade_fail() {
	local state="on"

	usbupgrade_state none

	for ((;;)); do
		sleep 1

		if [[ "on" == "${state}" ]]; then
			state="off"
		else
			state="on"
		fi

		sysled sys ${state}
		sysled sata ${state}
	done
}

#
#$1:partition
#$2:file
#
usbupgrade_bydd() {
	local partition=$1
	local file=$2
	local err=0
	local tag

	dd if=${file} of=${partition} &> /dev/null; err=$?

	tag=$(get_error_tag ${err})
	usbupgrade_echo_logger "${tag}: ${partition} by ${file}"

	return ${err}
}

#
#$1:idx
#
usbupgrade_rootfs() {
	local idx=$1
	local src=${dir_usb_upgrade_rootfs}
	local dst=$(rootfs_dir ${idx})
	local err=0

#	remount_rootfs ${idx} rw
	do_with_usbupgrade_echo_logger rsync_copy ${src} ${dst}; err=$?
#	remount_rootfs ${idx} ro

	if ((0!=idx)); then
		#
		# set buddy_version
		#
		local version=$(get_rootfs_version ${idx})
		set_buddy_version ${version} ${idx}
		usbupgrade_logger "set buddy_version${version}"

		#
		# try delete verfy file
		#
		local verfy=$(rootfs_verfy_file ${idx})
		rm -f ${verfy} &>/dev/null
		usbupgrade_logger "delete ${verfy}"
	fi

	return ${err}
}

usbupgrade_website() {
	local src=${dir_usb_upgrade_website}
	local dst=${dir_website_upgrade}

	do_with_usbupgrade_echo_logger rsync_copy ${src} ${dst} || return $?
}

usbupgrade_phase1() {
	#
	# upgrade bin
	#
	local name
	for name in ${!dev_emmc_bin[@]}; do
		local file=${dir_usb_upgrade}/${name}
		local partition=${dev_emmc_bin[${name}]}

		usbupgrade_bydd ${partition} ${file} || return $?
	done

	#
	# upgrade rootfs0
	#
	usbupgrade_rootfs 0 || return $?

	#
	# setup rootfs0's rsync version
	#
	rsync_setup_by 0 || return $?

	#
	# upgrade buddy
	#
	usbupgrade_rootfs ${buddy} || return $?

	#
	# upgrade website
	#
	usbupgrade_website || return $?

	usbupgrade_state upgrading
	bootm rootfs=${buddy}; sync
	usbupgrade_echo_logger "${info} ok, will reboot..."
	${__ROOTFS__}/usr/sbin/sysreboot
}

usbupgrade_phase2() {
	local buddy=$(rootfs_buddy)
	local err=0

	usbupgrade_rootfs ${buddy} || return $?
	${__ROOTFS__}/etc/upgrade/upgrade_ap.sh 'usbupgrade' || return $?

	usbupgrade_state ok
	bootm rootfs=${buddy};
}

usbupgrade_check() {
	if [[ ! -d "${dir_usb_upgrade_rootfs}" ]]; then
		return ${e_noexist}
	elif [[ ! -f "${file_usbupgrade_auto}" ]]; then
		return ${e_noexist}
	fi

	local name
	for name in ${!dev_emmc_bin[@]}; do
		if [[ ! -f "${dir_usb_upgrade}/${name}" ]]; then
			return ${e_noexist}
		fi
	done
}

#
# if do usb upgrade, return ${e_usbupgrade}
#
usbupgrade() {
	local buddy=$(rootfs_buddy)
	local err=0
	local tag
	local info

	#
	# no usb
	#
	usbupgrade_check || return

	local version=$(< ${dir_usb_upgrade_rootfs}/etc/.version)
	local state=$(usbupgrade_state)
	case ${state} in
	none)
		if [[ ! -f "${file_usbupgrade_force}" \
			&& "${version}" == "$(get_rootfs_version 0)" ]]; then
			usbupgrade_echo_logger \
				"usb version:${version}==rootfs0, needn't to upgrade"

			return
		fi

		info="version:${version} phase 1"
		usbupgrade_echo_logger "${info}..."

		#
		# upgrade boot/kernel/rootfs0/2
		#
		usbupgrade_phase1; err=$?

		tag=$(get_error_tag ${err})
		usbupgrade_echo_logger "${tag}: ${info}"

		if ((0!=err)); then
			usbupgrade_fail
		fi
		;;
	upgrading)
		info="version:${version} phase 2"
		usbupgrade_echo_logger "${info}..."

		#
		# upgrade rootfs1
		#
		usbupgrade_phase2; err=$?

		tag=$(get_error_tag ${err})
		usbupgrade_echo_logger "${tag}: ${info}"

		if ((0!=err)); then
			usbupgrade_fail
		fi
		;;
	ok)
		usbupgrade_echo_logger "OK"

		#
		# upgrade ok
		#
		usbupgrade_ok
		;;
	*)
		usbupgrade_echo_logger "bad state:${state}"

		return ${e_inval}
	esac

	return ${e_usbupgrade}
}
