#!/bin/bash

if [ -n "${__UPGRADE_USBUPGRADE_IN__}" ]; then
	return
else
	__UPGRADE_USBUPGRADE_IN__="$0"
fi

. ${__ROOTFS__}/etc/upgrade/upgrade.in


readonly file_usbupgrade_state=${dir_usb_upgrade}/.usbupgrade_state
readonly file_usbupgrade_force=${dir_usb_upgrade}/.usbupgrade_force
readonly file_usbupgrade_auto=${dir_usb_upgrade}/.usbupgrade_auto

usbupgrade_echo_logger() {
	echo "usbupgrade" "$@"
	logger "usbupgrade" "$@"
}

#
#$1:state
#
usbupgrade_state() {
	local state=$1

	if [ -z "${state}" ]; then
		#
		# get state
		#
		if [ -f "${file_usbupgrade_state}" ]; then
			cat ${file_usbupgrade_state}
		else
			echo "none"
		fi
	else
		#
		# set state
		#
		if [ "none" == "${state}" ]; then
			rm -f ${file_usbupgrade_state}
		else
			echo ${state} > ${file_usbupgrade_state}
		fi
	fi
}

usbupgrade_ok() {
	local state="on"

	usbupgrade_state "none"

	for ((;;)); do
		sleep 1

		sysled sys ${state}
		if [ "on" == "${state}" ]; then
			state="off"
		else
			state="on"
		fi
		sysled sata ${state}
	done
}

usbupgrade_fail() {
	local state="on"

	usbupgrade_state "none"

	for ((;;)); do
		sleep 1

		if [ "on" == "${state}" ]; then
			state="off"
		else
			state="on"
		fi

		sysled sys ${state}
		sysled sata ${state}
	done
}

#
#$1:partition
#$2:file
#
usbupgrade_bydd() {
	local partition=$1
	local file=$2
	local err=0
	local tag

	dd if=${file} of=${partition} > /dev/null 2>&1; err=$?

	tag=$(get_error_tag ${err})
	usbupgrade_echo_logger "${tag}: ${partition} by ${file}"

	return ${err}
}

#
#$1:idx
#
usbupgrade_rootfs() {
	local idx=$1
	local src=${dir_usb_upgrade_rootfs}
	local dst=$(rootfs_dir ${idx})
	local err=0
	local tag

	rsync_copy ${src} ${dst}; err=$?

	local tag
	if [ "0" != "${err}" ]; then
		tag="ERROR[${err}]"
	else
		tag="OK"
	fi
	usbupgrade_echo_logger "${tag}: copy ${src} to ${dst}"

	return ${err}
}

usbupgrade_website() {
	local src=${dir_usb_upgrade_website}
	local dst=${dir_website_upgrade}
	local err=0
	
	rsync_copy ${src} ${dst}; err=$?

        local tag
        if [ "0" != "${err}" ]; then
                tag="ERROR[${err}]"
        else
                tag="OK"
        fi
        usbupgrade_echo_logger "${tag}: copy ${src} to ${dst}"

	return ${err}
}

usbupgrade_phase1() {
	local err=0

	#
	# upgrade bin
	#
	local name
	for name in ${!dev_emmc_bin[*]}; do
		local file=${dir_usb_upgrade}/${name}
		local partition=${dev_emmc_bin[${name}]}

		usbupgrade_bydd ${partition} ${file}; err=$?
	done

	#
	# remount rootfs0
	#
	remount_rootfs 0; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	#
	# upgrade rootfs0
	#
	usbupgrade_rootfs 0; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	#
	# setup rootfs0's rsync version
	#
	rsync_setup_by 0; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	#
	# upgrade buddy
	#
	usbupgrade_rootfs ${buddy}; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	#
	# upgrade website
	#
	usbupgrade_website; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	usbupgrade_state "upgrading"
	bootm rootfs=${buddy}; sync
	usbupgrade_echo_logger "${info} ok, will reboot..."
	${__ROOTFS__}/usr/sbin/sysreboot
}

usbupgrade_phase2() {
	local buddy=$(rootfs_buddy)
	local err=0

	usbupgrade_rootfs ${buddy}; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	${__ROOTFS__}/etc/upgrade/upgrade_ap.sh 'usbupgrade'; err=$?
	if ((0!=err)); then
		return ${err}
	fi

	usbupgrade_state "ok"
	bootm rootfs=${buddy};
}

usbupgrade_need() {
	local name
	local file

	if [ ! -d "${dir_usb_upgrade_rootfs}" ]; then
		return ${e_noexist}
	fi

	for name in ${!dev_emmc_bin[*]}; do
		file=${dir_usb_upgrade}/${name}

		if [ ! -f "${file}" ]; then
			return ${e_noexist}
		fi
	done

	echo "need"
}

#
# if do usb upgrade, return ${e_usbupgrade}
#
usbupgrade() {
	local buddy=$(rootfs_buddy)
	local err=0
	local tag
	local info

	if [ ! -f "${file_usbupgrade_auto}" ]; then
		return
	fi

	local version=$(cat ${dir_usb_upgrade_rootfs}/etc/.version)
	local state="$(usbupgrade_state)"
	case "${state}" in
	"none")
		if [ "need" == "$(usbupgrade_need)" ]; then
			#
			# check usb/rootfs0 version
			#
			local version_rootfs0=$(get_rootfs_version 0)
			if [[ "${version}" == "${version_rootfs0}" \
				&& ! -f "${file_usbupgrade_force}" ]]; then
				usbupgrade_echo_logger \
					"version:${version}==rootfs0, needn't to upgrade"
				return
			fi

			info="version:${version} phase 1"
			usbupgrade_echo_logger "${info}..."

			#
			# upgrade boot/kernel/rootfs0/2
			#
			usbupgrade_phase1; err=$?

			tag=$(get_error_tag ${err})
			usbupgrade_echo_logger "${tag}: ${info}"

			if ((0!=err)); then
				usbupgrade_fail
			fi

			return ${e_usbupgrade}
		fi
		;;
	"upgrading")
		info="version:${version} phase 2"
		usbupgrade_echo_logger "${info}..."

		#
		# upgrade rootfs1
		#
		usbupgrade_phase2; err=$?

		tag=$(get_error_tag ${err})
		usbupgrade_echo_logger "${tag}: ${info}"

		if ((0!=err)); then
			usbupgrade_fail
		fi

		return ${e_usbupgrade}
		;;
	"ok")
		usbupgrade_echo_logger "OK"

		#
		# upgrade ok
		#
		usbupgrade_ok

		return ${e_usbupgrade}
		;;
	*)
		usbupgrade_echo_logger "bad state:${state}"

		return ${e_inval}
		;;
	esac
}
