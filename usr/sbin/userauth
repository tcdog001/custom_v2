#!/bin/bash

. /etc/utils/utils.in

get_group() {
	local flow=$1	
	local rate=$2	
	local i=0

	while [ -f "/tmp/config/group${i}" ]
	do
	    local tmpflow=`awk '/wan_flow_all/{print $2}'  /tmp/config/group${i}`
	    local tmprate=`awk '/wan_rate_down/{print $2}'  /tmp/config/group${i}`
	    if ((flow>=tmpflow*1000 && rate==tmprate)); then
	   	echo "$((i+1))" 
	   	return  
	    fi
       	    ((i++))
	done
	echo "0"
	return
}
do_umc_command() {
	local mac=$1
	local group=$2
	local filepath=/tmp/config/group"${group}" 
	
	if [ ! -f ${filepath} ]; then
		return 1
	fi

	local lan_online=`awk '/lan_online/{print $2}'  $filepath`
	local wan_online=`awk '/wan_online/{print $2}'  $filepath`

	local lan_flow_up=`awk '/lan_flow_up/{print $2}'  $filepath`
	local lan_flow_down=`awk '/lan_flow_down/{print $2}'  $filepath`
	local lan_flow_all=`awk '/lan_flow_all/{print $2}'  $filepath`
	local wan_flow_up=`awk '/wan_flow_up/{print $2}'  $filepath`
	local wan_flow_down=`awk '/wan_flow_down/{print $2}'  $filepath`
	local wan_flow_all=`awk '/wan_flow_all/{print $2}'  $filepath`

	local lan_rate_down=`awk '/lan_rate_down/{print $2}'  $filepath`
	local lan_rate_up=`awk '/lan_rate_up/{print $2}'  $filepath`
	local wan_rate_down=`awk '/wan_rate_down/{print $2}'  $filepath`
	local wan_rate_up=`awk '/wan_rate_up/{print $2}'  $filepath`	
	
	local lan_idle=`awk '/lan_idle/{print $2}' $filepath`
	local wan_idle=`awk '/wan_idle/{print $2}' $filepath`
	
	expr ${lan_online} +  ${wan_online} + ${lan_flow_up} + ${lan_flow_down} + ${lan_flow_all} \
	     + ${wan_flow_up} + ${wan_flow_down} + ${wan_flow_all} + ${lan_rate_down} \
	     + ${lan_rate_up} + ${wan_rate_down} + ${wan_rate_up} + ${lan_idle} + ${wan_idle} &>/dev/null

	if [ $? -ne 0 ]; then
                echo "Error: value in group${group} not a figure!" 
		return 1
	fi

        json=$(json_create \
       lan/online/max ${lan_online} \
       lan/online/idle ${lan_idle} \
       lan/flow/up/max ${lan_flow_up} \
       lan/flow/down/max ${lan_flow_down} \
       lan/flow/all/max ${lan_flow_all} \
       lan/rate/up/max ${lan_rate_up} \
       lan/rate/up/avg ${lan_rate_up} \
       lan/rate/down/max ${lan_rate_down} \
       lan/rate/down/avg ${lan_rate_down} \
       lan/rate/all/max ${lan_rate_down} \
       lan/rate/all/avg ${lan_rate_down} \
        wan/online/max ${wan_online} \
        wan/online/idle ${wan_idle} \
        wan/flow/up/max ${wan_flow_up} \
        wan/flow/down/max ${wan_flow_down} \
        wan/flow/all/max ${wan_flow_all} \
        wan/rate/up/max ${wan_rate_up} \
        wan/rate/up/avg ${wan_rate_up} \
        wan/rate/down/max ${wan_rate_down} \
        wan/rate/down/avg ${wan_rate_down} \
        wan/rate/all/max ${wan_rate_down} \
        wan/rate/all/avg ${wan_rate_down})

        json=$(echo ${json} | jq -j -c .)
        echo "umc auth $mac $group $json"
        umc auth "${mac}" "${group}" "${json}"
}
uauth_ver2() {
	#userauth 2 mac group 

	local argc=$#
	local mac=$2
	local group=$3

	if ((3!=argc)); then
		return 1
	fi

	do_umc_command ${mac} ${group}
}

uauth_ver3() {
	#userauth 3 mac json
	return 
}

uauth_ver1() {
#userauth 1 mac
	
	local mac=$2
	local argc=$#

	if((2!=argc)); then
		return 1
	fi

	local oneline=`umc show "{\"mac\":\"$mac\"}"`

 	local tmpmac=`echo $oneline | jq .mac`

	if [[ "\"$mac\"" != "$tmpmac" ]]; then
		do_umc_command ${mac} 0
		return 0 
	fi	

        local reason=`echo $oneline | jq .reason`
	if [[ "$reason" != "\"flowlimit\"" ]]; then	
		do_umc_command ${mac} 0
		return 0 
   	fi		

	local wan_flow_all=`echo $oneline | jq .limit.wan.flow.now`
	local wan_rate_down=`echo $oneline | jq .limit.wan.rate.max`

	local group=$(get_group "${wan_flow_all}" "${wan_rate_down}")
	
	do_umc_command ${mac} ${group}
	return 0
}

main(){
	local version=$1

	case ${version} in
		1|2|3)
		uauth_ver${version} "$@"
		;;
	*)
		return 1
		;;
	esac	

}
main "$@"
